{"ast":null,"code":"var _jsxFileName = \"/home/erteduarda/unb/PA/dijkstra-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Map from './components/Map';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  text-align: center;\n  padding: 20px;\n`;\n_c = Container;\nconst Button = styled.button`\n  margin: 10px;\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n`;\n_c2 = Button;\nfunction App() {\n  _s();\n  const [graph, setGraph] = useState(null);\n  const [path, setPath] = useState([]);\n  const [carPosition, setCarPosition] = useState(null);\n  const generateMap = () => {\n    // Gerar 6 nós com posições aleatórias, garantindo maior dispersão\n    const nodes = Array.from({\n      length: 6\n    }, (_, i) => ({\n      id: i,\n      x: Math.random() * 400,\n      // Posição X aleatória\n      y: Math.random() * 400 // Posição Y aleatória\n    }));\n\n    // Gerar mais arestas para conectar os nós\n    const edges = [{\n      from: 0,\n      to: 1,\n      weight: Math.floor(Math.random() * 10 + 1)\n    }, {\n      from: 1,\n      to: 2,\n      weight: Math.floor(Math.random() * 10 + 1)\n    }, {\n      from: 2,\n      to: 3,\n      weight: Math.floor(Math.random() * 10 + 1)\n    }, {\n      from: 3,\n      to: 4,\n      weight: Math.floor(Math.random() * 10 + 1)\n    }, {\n      from: 4,\n      to: 5,\n      weight: Math.floor(Math.random() * 10 + 1)\n    }, {\n      from: 5,\n      to: 0,\n      weight: Math.floor(Math.random() * 10 + 1)\n    }, {\n      from: 0,\n      to: 2,\n      weight: Math.floor(Math.random() * 10 + 1)\n    }, {\n      from: 1,\n      to: 3,\n      weight: Math.floor(Math.random() * 10 + 1)\n    }, {\n      from: 2,\n      to: 4,\n      weight: Math.floor(Math.random() * 10 + 1)\n    }];\n    setGraph({\n      nodes,\n      edges\n    });\n    setCarPosition(null); // Resetar a posição do carrinho\n    setPath([]); // Resetar o caminho\n  };\n  const dijkstra = (nodes, edges, startNode, endNode) => {\n    const distances = {};\n    const previous = {};\n    const visited = new Set();\n    nodes.forEach(node => {\n      distances[node.id] = Infinity;\n      previous[node.id] = null;\n    });\n    distances[startNode] = 0;\n    while (visited.size < nodes.length) {\n      const unvisitedNodes = nodes.filter(node => !visited.has(node.id));\n      const currentNode = unvisitedNodes.reduce((a, b) => distances[a.id] < distances[b.id] ? a : b, unvisitedNodes[0]);\n      if (distances[currentNode.id] === Infinity) break;\n      visited.add(currentNode.id);\n      edges.forEach(edge => {\n        if (edge.from === currentNode.id || edge.to === currentNode.id) {\n          const neighborId = edge.from === currentNode.id ? edge.to : edge.from;\n          if (!visited.has(neighborId)) {\n            const newDist = distances[currentNode.id] + edge.weight;\n            if (newDist < distances[neighborId]) {\n              distances[neighborId] = newDist;\n              previous[neighborId] = currentNode.id;\n            }\n          }\n        }\n      });\n    }\n    const path = [];\n    let current = endNode;\n    while (current !== null) {\n      path.unshift(current);\n      current = previous[current];\n    }\n    return {\n      path,\n      distances\n    };\n  };\n  const startSimulation = () => {\n    if (!graph) return;\n    const {\n      nodes,\n      edges\n    } = graph;\n    const result = dijkstra(nodes, edges, 0, nodes.length - 1); // Do nó 0 ao último nó\n    setPath(result.path);\n    let step = 0;\n    const interval = setInterval(() => {\n      if (step < result.path.length) {\n        const currentNode = nodes.find(node => node.id === result.path[step]);\n        setCarPosition({\n          x: currentNode.x,\n          y: currentNode.y\n        });\n        step++;\n      } else {\n        clearInterval(interval);\n      }\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Algoritmo de Dijkstra\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: generateMap,\n      children: \"Gerar Mapa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: startSimulation,\n      children: \"Iniciar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), graph && /*#__PURE__*/_jsxDEV(Map, {\n      graph: graph,\n      carPosition: carPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4dTV+wm6M6geUw9H4TlsYBNgyYA=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","Map","styled","jsxDEV","_jsxDEV","Container","div","_c","Button","button","_c2","App","_s","graph","setGraph","path","setPath","carPosition","setCarPosition","generateMap","nodes","Array","from","length","_","i","id","x","Math","random","y","edges","to","weight","floor","dijkstra","startNode","endNode","distances","previous","visited","Set","forEach","node","Infinity","size","unvisitedNodes","filter","has","currentNode","reduce","a","b","add","edge","neighborId","newDist","current","unshift","startSimulation","result","step","interval","setInterval","find","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c3","$RefreshReg$"],"sources":["/home/erteduarda/unb/PA/dijkstra-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Map from './components/Map';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  text-align: center;\n  padding: 20px;\n`;\n\nconst Button = styled.button`\n  margin: 10px;\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n`;\n\nfunction App() {\n  const [graph, setGraph] = useState(null);\n  const [path, setPath] = useState([]);\n  const [carPosition, setCarPosition] = useState(null);\n\n  const generateMap = () => {\n    // Gerar 6 nós com posições aleatórias, garantindo maior dispersão\n    const nodes = Array.from({ length: 6 }, (_, i) => ({\n      id: i,\n      x: Math.random() * 400, // Posição X aleatória\n      y: Math.random() * 400, // Posição Y aleatória\n    }));\n\n    // Gerar mais arestas para conectar os nós\n    const edges = [\n      { from: 0, to: 1, weight: Math.floor(Math.random() * 10 + 1) },\n      { from: 1, to: 2, weight: Math.floor(Math.random() * 10 + 1) },\n      { from: 2, to: 3, weight: Math.floor(Math.random() * 10 + 1) },\n      { from: 3, to: 4, weight: Math.floor(Math.random() * 10 + 1) },\n      { from: 4, to: 5, weight: Math.floor(Math.random() * 10 + 1) },\n      { from: 5, to: 0, weight: Math.floor(Math.random() * 10 + 1) },\n      { from: 0, to: 2, weight: Math.floor(Math.random() * 10 + 1) },\n      { from: 1, to: 3, weight: Math.floor(Math.random() * 10 + 1) },\n      { from: 2, to: 4, weight: Math.floor(Math.random() * 10 + 1) },\n    ];\n\n    setGraph({ nodes, edges });\n    setCarPosition(null); // Resetar a posição do carrinho\n    setPath([]); // Resetar o caminho\n  };\n\n  const dijkstra = (nodes, edges, startNode, endNode) => {\n    const distances = {};\n    const previous = {};\n    const visited = new Set();\n\n    nodes.forEach((node) => {\n      distances[node.id] = Infinity;\n      previous[node.id] = null;\n    });\n    distances[startNode] = 0;\n\n    while (visited.size < nodes.length) {\n      const unvisitedNodes = nodes.filter((node) => !visited.has(node.id));\n      const currentNode = unvisitedNodes.reduce(\n        (a, b) => (distances[a.id] < distances[b.id] ? a : b),\n        unvisitedNodes[0]\n      );\n\n      if (distances[currentNode.id] === Infinity) break;\n\n      visited.add(currentNode.id);\n\n      edges.forEach((edge) => {\n        if (edge.from === currentNode.id || edge.to === currentNode.id) {\n          const neighborId = edge.from === currentNode.id ? edge.to : edge.from;\n          if (!visited.has(neighborId)) {\n            const newDist = distances[currentNode.id] + edge.weight;\n            if (newDist < distances[neighborId]) {\n              distances[neighborId] = newDist;\n              previous[neighborId] = currentNode.id;\n            }\n          }\n        }\n      });\n    }\n\n    const path = [];\n    let current = endNode;\n    while (current !== null) {\n      path.unshift(current);\n      current = previous[current];\n    }\n    return { path, distances };\n  };\n\n  const startSimulation = () => {\n    if (!graph) return;\n\n    const { nodes, edges } = graph;\n    const result = dijkstra(nodes, edges, 0, nodes.length - 1); // Do nó 0 ao último nó\n    setPath(result.path);\n\n    let step = 0;\n    const interval = setInterval(() => {\n      if (step < result.path.length) {\n        const currentNode = nodes.find((node) => node.id === result.path[step]);\n        setCarPosition({ x: currentNode.x, y: currentNode.y });\n        step++;\n      } else {\n        clearInterval(interval);\n      }\n    }, 1000);\n  };\n\n  return (\n    <Container>\n      <h1>Algoritmo de Dijkstra</h1>\n      <Button onClick={generateMap}>Gerar Mapa</Button>\n      <Button onClick={startSimulation}>Iniciar</Button>\n      {graph && <Map graph={graph} carPosition={carPosition} />}\n    </Container>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}